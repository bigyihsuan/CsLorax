//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lorax.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LoraxLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, IDENTIFIER=4, INTEGER=5, TREE_ACCESS_LEFT=6, TREE_ACCESS_RIGHT=7, 
		TREE_ACCESS_PARENT=8, TREE_ACCESS_VALUE=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "IDENTIFIER", "INTEGER", "TREE_ACCESS_LEFT", "TREE_ACCESS_RIGHT", 
		"TREE_ACCESS_PARENT", "TREE_ACCESS_VALUE", "DIGIT", "ALPHA", "ALPHANUM"
	};


	public LoraxLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LoraxLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "']'", null, null, "'/'", "'\\'", "'^'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "IDENTIFIER", "INTEGER", "TREE_ACCESS_LEFT", "TREE_ACCESS_RIGHT", 
		"TREE_ACCESS_PARENT", "TREE_ACCESS_VALUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lorax.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LoraxLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,9,57,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,3,4,3,35,8,3,11,3,12,3,36,1,4,4,4,40,8,4,11,4,12,4,41,1,5,1,5,
		1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,0,0,12,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,0,1,0,3,1,0,48,57,2,0,65,90,97,
		122,3,0,48,57,65,90,97,122,56,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,1,25,1,0,0,0,3,27,1,0,0,0,5,29,1,0,0,0,7,31,1,0,0,0,9,39,1,0,0,0,11,
		43,1,0,0,0,13,45,1,0,0,0,15,47,1,0,0,0,17,49,1,0,0,0,19,51,1,0,0,0,21,
		53,1,0,0,0,23,55,1,0,0,0,25,26,5,91,0,0,26,2,1,0,0,0,27,28,5,44,0,0,28,
		4,1,0,0,0,29,30,5,93,0,0,30,6,1,0,0,0,31,34,3,21,10,0,32,35,5,95,0,0,33,
		35,3,23,11,0,34,32,1,0,0,0,34,33,1,0,0,0,35,36,1,0,0,0,36,34,1,0,0,0,36,
		37,1,0,0,0,37,8,1,0,0,0,38,40,3,19,9,0,39,38,1,0,0,0,40,41,1,0,0,0,41,
		39,1,0,0,0,41,42,1,0,0,0,42,10,1,0,0,0,43,44,5,47,0,0,44,12,1,0,0,0,45,
		46,5,92,0,0,46,14,1,0,0,0,47,48,5,94,0,0,48,16,1,0,0,0,49,50,5,36,0,0,
		50,18,1,0,0,0,51,52,7,0,0,0,52,20,1,0,0,0,53,54,7,1,0,0,54,22,1,0,0,0,
		55,56,7,2,0,0,56,24,1,0,0,0,4,0,34,36,41,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
