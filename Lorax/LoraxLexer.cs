//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lorax.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LoraxLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T_NULL=8, T_BOOL=9, 
		T_TRUE=10, T_FALSE=11, IDENTIFIER=12, INTEGER=13, FLOAT=14, STRING=15, 
		TREE_ACCESS_LEFT=16, TREE_ACCESS_RIGHT=17, TREE_ACCESS_PARENT=18, TREE_ACCESS_VALUE=19, 
		WS=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T_NULL", "T_BOOL", 
		"T_TRUE", "T_FALSE", "IDENTIFIER", "INTEGER", "FLOAT", "STRING", "TREE_ACCESS_LEFT", 
		"TREE_ACCESS_RIGHT", "TREE_ACCESS_PARENT", "TREE_ACCESS_VALUE", "DIGIT", 
		"ALPHA", "ALPHANUM", "ANY", "WS"
	};


	public LoraxLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LoraxLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "':'", "'@'", "'<'", "','", "'>'", "'Null'", null, 
		"'True'", "'False'", null, null, null, null, "'/'", "'\\'", "'^'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "T_NULL", "T_BOOL", "T_TRUE", 
		"T_FALSE", "IDENTIFIER", "INTEGER", "FLOAT", "STRING", "TREE_ACCESS_LEFT", 
		"TREE_ACCESS_RIGHT", "TREE_ACCESS_PARENT", "TREE_ACCESS_VALUE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lorax.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LoraxLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,147,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,3,8,71,8,8,1,9,1,9,1,9,1,9,1,9,1,
		10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,4,11,87,8,11,11,11,12,11,88,
		1,12,3,12,92,8,12,1,12,4,12,95,8,12,11,12,12,12,96,1,13,3,13,100,8,13,
		1,13,4,13,103,8,13,11,13,12,13,104,1,13,1,13,4,13,109,8,13,11,13,12,13,
		110,1,14,1,14,5,14,115,8,14,10,14,12,14,118,9,14,1,14,1,14,1,15,1,15,1,
		16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
		22,3,22,139,8,22,1,23,4,23,142,8,23,11,23,12,23,143,1,23,1,23,1,116,0,
		24,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,0,41,0,43,0,45,0,47,20,1,0,5,1,0,48,
		57,2,0,65,90,97,122,3,0,48,57,65,90,97,122,3,0,9,10,13,13,39,39,3,0,9,
		10,13,13,32,32,153,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,
		0,3,51,1,0,0,0,5,53,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,59,1,0,0,0,13,
		61,1,0,0,0,15,63,1,0,0,0,17,70,1,0,0,0,19,72,1,0,0,0,21,77,1,0,0,0,23,
		83,1,0,0,0,25,91,1,0,0,0,27,99,1,0,0,0,29,112,1,0,0,0,31,121,1,0,0,0,33,
		123,1,0,0,0,35,125,1,0,0,0,37,127,1,0,0,0,39,129,1,0,0,0,41,131,1,0,0,
		0,43,133,1,0,0,0,45,138,1,0,0,0,47,141,1,0,0,0,49,50,5,91,0,0,50,2,1,0,
		0,0,51,52,5,93,0,0,52,4,1,0,0,0,53,54,5,58,0,0,54,6,1,0,0,0,55,56,5,64,
		0,0,56,8,1,0,0,0,57,58,5,60,0,0,58,10,1,0,0,0,59,60,5,44,0,0,60,12,1,0,
		0,0,61,62,5,62,0,0,62,14,1,0,0,0,63,64,5,78,0,0,64,65,5,117,0,0,65,66,
		5,108,0,0,66,67,5,108,0,0,67,16,1,0,0,0,68,71,3,19,9,0,69,71,3,21,10,0,
		70,68,1,0,0,0,70,69,1,0,0,0,71,18,1,0,0,0,72,73,5,84,0,0,73,74,5,114,0,
		0,74,75,5,117,0,0,75,76,5,101,0,0,76,20,1,0,0,0,77,78,5,70,0,0,78,79,5,
		97,0,0,79,80,5,108,0,0,80,81,5,115,0,0,81,82,5,101,0,0,82,22,1,0,0,0,83,
		86,3,41,20,0,84,87,5,95,0,0,85,87,3,43,21,0,86,84,1,0,0,0,86,85,1,0,0,
		0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,24,1,0,0,0,90,92,5,45,0,
		0,91,90,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,95,3,39,19,0,94,93,1,0,
		0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,26,1,0,0,0,98,100,5,45,
		0,0,99,98,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,103,3,39,19,0,102,
		101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,106,1,
		0,0,0,106,108,5,46,0,0,107,109,3,39,19,0,108,107,1,0,0,0,109,110,1,0,0,
		0,110,108,1,0,0,0,110,111,1,0,0,0,111,28,1,0,0,0,112,116,5,39,0,0,113,
		115,3,45,22,0,114,113,1,0,0,0,115,118,1,0,0,0,116,117,1,0,0,0,116,114,
		1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,0,119,120,5,39,0,0,120,30,1,0,0,
		0,121,122,5,47,0,0,122,32,1,0,0,0,123,124,5,92,0,0,124,34,1,0,0,0,125,
		126,5,94,0,0,126,36,1,0,0,0,127,128,5,36,0,0,128,38,1,0,0,0,129,130,7,
		0,0,0,130,40,1,0,0,0,131,132,7,1,0,0,132,42,1,0,0,0,133,134,7,2,0,0,134,
		44,1,0,0,0,135,136,5,92,0,0,136,139,9,0,0,0,137,139,8,3,0,0,138,135,1,
		0,0,0,138,137,1,0,0,0,139,46,1,0,0,0,140,142,7,4,0,0,141,140,1,0,0,0,142,
		143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,6,
		23,0,0,146,48,1,0,0,0,12,0,70,86,88,91,96,99,104,110,116,138,143,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
