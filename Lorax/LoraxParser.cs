//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lorax.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LoraxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, INTEGER=4;
	public const int
		RULE_treeLiteral = 0, RULE_treeChild = 1, RULE_nodeValue = 2;
	public static readonly string[] ruleNames = {
		"treeLiteral", "treeChild", "nodeValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "INTEGER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lorax.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LoraxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LoraxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LoraxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TreeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeValueContext nodeValue() {
			return GetRuleContext<NodeValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeChildContext[] treeChild() {
			return GetRuleContexts<TreeChildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeChildContext treeChild(int i) {
			return GetRuleContext<TreeChildContext>(i);
		}
		public TreeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoraxListener typedListener = listener as ILoraxListener;
			if (typedListener != null) typedListener.EnterTreeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoraxListener typedListener = listener as ILoraxListener;
			if (typedListener != null) typedListener.ExitTreeLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TreeLiteralContext treeLiteral() {
		TreeLiteralContext _localctx = new TreeLiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_treeLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			nodeValue();
			State = 7;
			Match(T__0);
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==INTEGER) {
				{
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 8;
					treeChild();
					}
				}

				State = 11;
				Match(T__1);
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 12;
					treeChild();
					}
				}

				}
			}

			State = 17;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeChildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeValueContext nodeValue() {
			return GetRuleContext<NodeValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeLiteralContext treeLiteral() {
			return GetRuleContext<TreeLiteralContext>(0);
		}
		public TreeChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeChild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoraxListener typedListener = listener as ILoraxListener;
			if (typedListener != null) typedListener.EnterTreeChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoraxListener typedListener = listener as ILoraxListener;
			if (typedListener != null) typedListener.ExitTreeChild(this);
		}
	}

	[RuleVersion(0)]
	public TreeChildContext treeChild() {
		TreeChildContext _localctx = new TreeChildContext(Context, State);
		EnterRule(_localctx, 2, RULE_treeChild);
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19;
				nodeValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20;
				treeLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LoraxParser.INTEGER, 0); }
		public NodeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILoraxListener typedListener = listener as ILoraxListener;
			if (typedListener != null) typedListener.EnterNodeValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILoraxListener typedListener = listener as ILoraxListener;
			if (typedListener != null) typedListener.ExitNodeValue(this);
		}
	}

	[RuleVersion(0)]
	public NodeValueContext nodeValue() {
		NodeValueContext _localctx = new NodeValueContext(Context, State);
		EnterRule(_localctx, 4, RULE_nodeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,4,26,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,3,0,10,8,0,1,0,1,0,3,0,14,
		8,0,3,0,16,8,0,1,0,1,0,1,1,1,1,3,1,22,8,1,1,2,1,2,1,2,0,0,3,0,2,4,0,0,
		26,0,6,1,0,0,0,2,21,1,0,0,0,4,23,1,0,0,0,6,7,3,4,2,0,7,15,5,1,0,0,8,10,
		3,2,1,0,9,8,1,0,0,0,9,10,1,0,0,0,10,11,1,0,0,0,11,13,5,2,0,0,12,14,3,2,
		1,0,13,12,1,0,0,0,13,14,1,0,0,0,14,16,1,0,0,0,15,9,1,0,0,0,15,16,1,0,0,
		0,16,17,1,0,0,0,17,18,5,3,0,0,18,1,1,0,0,0,19,22,3,4,2,0,20,22,3,0,0,0,
		21,19,1,0,0,0,21,20,1,0,0,0,22,3,1,0,0,0,23,24,5,4,0,0,24,5,1,0,0,0,4,
		9,13,15,21
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
